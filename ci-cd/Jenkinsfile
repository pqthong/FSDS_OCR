// A declarative pipeline for building and testing the FSDS_OCR repository with GCP integration.
pipeline {
    // We're using a generic agent, assuming it has the necessary tools (gcloud, docker, helm, kubectl).
    // For a more robust solution, you could use a custom Docker agent like we discussed previously.
    agent any

    environment {
        // Define the project ID and cluster name. You can configure these as environment variables in Jenkins.
        GCP_PROJECT_ID = "alert-basis-466711-e1"
        GKE_CLUSTER_NAME = "jenkins-managed-cluster" // <-- REPLACE WITH YOUR CLUSTER NAME
        GKE_CLUSTER_LOCATION = "asia-southeast1-a" // <-- REPLACE WITH YOUR CLUSTER REGION/ZONE
        IMAGE_REPO = "asia-southeast1-docker.pkg.dev/alert-basis-466711-e1/jenkins-artifacts/fsds-ocr"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Cloning the repository from GitHub...'
                // The 'git' step checks out the code.
                // Replace 'main' with the correct branch name if it differs.
                git url: 'https://github.com/pqthong/FSDS_OCR',
                    branch: 'main'
                echo 'Repository cloned successfully.'
            }
        }
        
        // This stage sets up the Python virtual environment and runs the tests.
        stage('Run Tests') {
            steps {
                script {
                    echo 'Setting up Python virtual environment...'
                    sh 'python3 -m venv venv'
                    
                    echo 'Installing dependencies from app/requirements.txt...'
                    // Use the pip executable from the virtual environment to install packages.
                    sh './venv/bin/pip install -r app/requirements.txt'
                    
                    echo 'Running tests...'
                    // Use the pytest executable from the virtual environment and specify the test file path.
                    sh './venv/bin/pytest app/tests/test_main.py'
                    
                    echo 'Tests completed.'
                }
            }
        }
        
        // This stage handles authentication with GCP, builds the Docker image, and pushes it to Artifact Registry.
        stage('Build and Push Image') {
            steps {
                // The withCredentials block securely accesses the service account key from Jenkins.
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_KEY_FILE')]) {
                    script {
                        echo 'Authenticating with GCP service account...'
                        // Activate the service account using the key file.
                        // This command sets up authentication for all subsequent gcloud commands.
                        sh "gcloud auth activate-service-account --key-file='${GCP_KEY_FILE}'"
                        
                        echo 'Configuring Docker for Artifact Registry...'
                        // Configure Docker to use gcloud as a credential helper for Artifact Registry.
                        sh 'gcloud auth configure-docker asia-southeast1-docker.pkg.dev'
                        
                        echo 'Building and pushing Docker image...'
                        // Navigate into the directory containing the Dockerfile.
                        dir('app') {
                            // Build the image and tag it with the full repository path and build number.
                            sh "docker build -t ${IMAGE_REPO}:${BUILD_NUMBER} ."
                            
                            // Push the image to Artifact Registry.
                            sh "docker push ${IMAGE_REPO}:${BUILD_NUMBER}"
                        }
                        echo 'Docker image built and pushed successfully.'
                    }
                }
            }
        }
        
        // The deploy stage now uses the service account credentials to authenticate with GKE.
        stage('Deploy to GKE') {
            steps {
                // The withCredentials block securely accesses the service account key.
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_KEY_FILE')]) {
                    script {
                        echo 'Authenticating with GCP service account and GKE cluster...'
                        // Activate the service account using the key file.
                        sh "gcloud auth activate-service-account --key-file='${GCP_KEY_FILE}'"
                        
                        // Get GKE cluster credentials. This command sets up the kubeconfig for subsequent kubectl/helm commands.
                        sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --region=${GKE_CLUSTER_LOCATION} --project=${GCP_PROJECT_ID}"
                        
                        echo 'Deploying application using Helm chart...'
                        // Navigate into the directory containing the Helm chart.
                        dir('ocr-chart') {
                            // The 'helm upgrade --install' command will deploy or update the chart.
                            // We use '--set' to dynamically update the image tag from the build number.
                            sh "helm upgrade --install fsds-ocr . --set image.repository=${IMAGE_REPO},image.tag=${BUILD_NUMBER} --namespace default"
                        }
                        
                        echo 'Deployment initiated successfully.'
                    }
                }
            }
        }
    }
}
