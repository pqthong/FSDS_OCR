pipeline {
    // The agent directive tells Jenkins which environment to use for the entire pipeline.
    agent any

    stages {
        stage('Verify Agent') {
            steps {
                script {
                    echo "Checking if the custom agent is working..."
                    // This command will confirm that Python is installed in our custom image.
                    sh 'python3 --version'
                }
            }
        }

        stage('Checkout Code') {
            steps {
                echo 'Cloning the repository from GitHub...'
                // The 'git' step checks out the code.
                // Replace 'main' with the correct branch name if it differs.
                git url: 'https://github.com/pqthong/FSDS_OCR',
                    branch: 'main'
                echo 'Repository cloned successfully.'
            }
        }

        // The second stage sets up the Python environment and runs the tests.
        stage('Run Tests') {
            steps {
                // We use a script block to execute multiple shell commands sequentially.
                script {
                    echo 'Setting up Python virtual environment...'
                    // Create a Python virtual environment to isolate project dependencies.
                    // This prevents conflicts with other projects on the same Jenkins agent.
                    sh 'python3 -m venv venv'
                    
                    // --- FIX FOR PERMISSION DENIED ERROR ---
                    // Directly calling the pip and pytest executables from within the venv
                    // avoids the need to 'activate' the environment, which can be unreliable
                    // in a non-interactive shell context like Jenkins. It also ensures
                    // all packages are installed locally to the workspace.
                    
                    echo 'Installing dependencies from app/requirements.txt...'
                    // Use the pip executable from the virtual environment to install packages.
                    sh './venv/bin/pip install -r app/requirements.txt'
                    
                    echo 'Running tests...'
                    // Use the pytest executable from the virtual environment to run the tests.
                    sh './venv/bin/pytest'
                    
                    echo 'Tests completed.'
                }
            }
        }
        stage('Build Image') {
            steps {
                echo 'Building Docker image...'
                // Navigate into the directory containing the Dockerfile.
                // Based on the repository, this is likely in the 'app' directory.
                dir('app') {
                    // Use a unique tag based on the Jenkins build number, and also a 'latest' tag.
                    // Replace 'asia-southeast1-docker.pkg.dev/alert-basis-466711-e1/fsds-ocr' with your
                    // actual image repository path.
                    sh 'docker build -t asia-southeast1-docker.pkg.dev/alert-basis-466711-e1/fsds-ocr:${BUILD_NUMBER} -t asia-southeast1-docker.pkg.dev/alert-basis-466711-e1/fsds-ocr:latest .'
                }
                echo 'Docker image built and tagged successfully.'
            }
        }

        stage('Push Image') {
            steps {
                echo 'Pushing Docker image to Google Artifact Registry...'
                // Push the Docker image to the specified repository.
                // This uses the same tags as when it was built.
                sh 'docker push asia-southeast1-docker.pkg.dev/alert-basis-466711-e1/fsds-ocr:${BUILD_NUMBER}'
                echo 'Docker image pushed successfully.'
            }
        }

        stage('Deploy to GKE') {
            steps {
                echo 'Deploying to Google Kubernetes Engine...'
                // Use kubectl to apply the deployment configuration.
                // This assumes you have a deployment.yaml file in the 'app' directory.
                dir('kubernetes') {
                    // Apply the Kubernetes deployment configuration.
                    // This will update the deployment with the new image.
                    sh 'helm upgrade --install fsds-ocr . --set image.repository=asia-southeast1-docker.pkg.dev/alert-basis-466711-e1/fsds-ocr,image.tag=${BUILD_NUMBER}'
                }
                echo 'Deployment applied successfully.'
            }
        }
    }
}
